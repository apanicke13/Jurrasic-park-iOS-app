import Foundation

class PredatorController {
    private var allApexPredators: [ApexPredator]=[]
    var apexPredators:[ApexPredator]=[]
    let typeFilters = ["All", "Land", "Air", "Sea"]

    init(){
        decodeApexPredatorData()
    }

    func decodeApexPredatorData() {
        if let url=Bundle.main.url(forResource: "jpapexpredators", withExtension: "json"){
            do{
                let data = try Data(contentOf: url)
                let decoder = JSONDecoder()
                decoder.keyDecodingStrategy = .convertFromSnakeCase
                apexPredators = try decoder.decode([ApexPredator.self], from: data)
                apexPredators = allApexPredators
            } catch {
                print("Error decoding JSON data: \(error)")
            }
        }
    }

    func typeIcon(for type: String) -> String {
        switch type {
            case "All": return "square.stack.3d.up.fill"
            case "Land": return "leaf.fill"
            case "Air": return "wind"
            case "Sea": return "drop.fill"
            default : return "questionmark"
        }
    }

    func filterBy(type: String) {
        switch type {
            case "Land", "Air", "Sea":
            apexPredators = allapexPredators.filter {
                $0.type == type.lowercased()
            }
            default: apexPredators = allApexPredators
        }
    }

    func sortByAlphabetical() {
        apexPredators.sort(by: { $0.name < $1.name})

    }

    func sortByMovieAppearence() {
        apexPredators.sort(by:{ $0.id < $1.id})
    }
}